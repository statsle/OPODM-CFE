from dataclasses import dataclass
from enum import Enum
import json
from PIL import Image
import random
import streamlit as st

st.set_page_config(
    page_title="T2I Validation Dashboard",
    page_icon="🖼️",
    layout="wide",
    initial_sidebar_state="collapsed",
    menu_items={
        'Get Help': 'mailto:m.filomenor@gmail.com'
    }
)

class SD_Variant(Enum):
    dpo_diffusion = "dpo"
    reference = "ref"
    ours = "ours" 

@dataclass
class Sample:
    image_id: int
    prompt: str
    image_0: Image
    image_1: Image
    model_0: SD_Variant
    model_1: SD_Variant

def random_selection(prompt_list: list, not_visited: set) -> Sample:
    image_id = random.choice(tuple(not_visited))
    not_visited.remove(image_id)

    prompt = prompt_list[image_id]

    model_0, model_1 = random.sample(list(SD_Variant), 2)

    image_0 = Image.open(f"data/inference_{model_0.value}/images/img_MI{image_id}.png")
    image_1 = Image.open(f"data/inference_{model_1.value}/images/img_MI{image_id}.png")

    return Sample(
        image_id=image_id,
        prompt=prompt,
        image_0=image_0,
        image_1=image_1,
        model_0=model_0,
        model_1=model_1
    )

@st.cache_data
def get_prompt_list(path) -> list:
    prompt_list = list()

    with open(path, 'r') as file:  
        for line in file:
            key, value = line.split('<sep>', 1)
            prompt_list.append(value.strip())
    
    return prompt_list

@st.cache_data
def convert_for_download(pref_dict):
    return json.dumps(
        pref_dict, 
        ensure_ascii=False, 
        indent=4,
    ).encode('utf-8')

def main():
    st.title("Model validation dashboard")
    st.markdown("## Online Preference Optimization for Diffusion Models with Classifier-Free Exploration")
    st.markdown("### Author: Mauro Filomeno Rivero")
    st.markdown("##### Supervisor: Qiang Sun (UofT)")
    st.markdown("##### Tutor: Pedro Delicado Useros (UPC)")

    st.markdown("Welcome to the model validation dashboard for my final bachelor's thesis.")
    st.markdown("""
        The aim of this dashboard is to collect some feedback on your personal preference on AI generated images.
        My work focuses on enhancing the performance of text-to-image models towards images that are more 
        aligned with what a human expects when they write a prompt. Eventually, the idea would be to have models that 
        generate images just as skilled human artist might do, so you don't even know it's AI! (There should always 
        be a way to tell apart from an ethical standpoint, though).
             
        Here, you will be the judge against two generated images from different models that were given the same
        prompt. You will serve to validate whether my work does improve the model, so hopefully you prefer the images 
        generated by my model. The twist is that you don't know which model generated what images, so you can be a
        completely unbiased judge.
    """)

    with st.expander("Judging Tutorial"):
        st.subheader("How should I judge?")

        st.markdown("""
            You are given a prompt and two generated images. You have to choose which image is better
            **GIVEN THE PROMPT**. So you whould ask yourself: if I were to give the model this prompt, which 
            generated image would I prefer?
            If you think both are equally good or bad and you can't really choose, or you already saw that pair, 
            just select 'skip', but try to avoid this option. 
            You might not like some of the images as the model we are fine-tuning is not the current 
            state-of-the-art. However, choose the one you would prefer.
        """)
    
    st.warning("Disclaimer: This dashboard may display adult or sensitive content. Viewer discretion is advised.")

    id = st.text_input(
        label="Your Name",
        value=None,
        help="Please enter your name.",
    )

    if id is None:
        return 
    
    if 'pref_dict' not in st.session_state:
        st.session_state.pref_dict = {'user': id, 'preferences': list()}
    else:
        st.session_state.pref_dict['user'] = id

    prompt_list = get_prompt_list("data/inference_ref/prompts.txt")

    if 'not_visited' not in st.session_state:
        st.session_state.not_visited = set(range(0, len(prompt_list)))

    with st.form("Dashboard", clear_on_submit = True):
        sample = random_selection(prompt_list, st.session_state.not_visited)
        st.write(sample.prompt)

        col0, col1 = st.columns(2)
        with col0:
            st.image(sample.image_0)
        with col1:
            st.image(sample.image_1)
        
        selection = st.pills(
            "Preferred image",
            (0, 1, 2),
            format_func = (lambda x: ("Left Image", "Right Image", "Skip")[x]),
            selection_mode = "single",
            default = None,
        )

        if st.form_submit_button("Submit"):
            if selection is None:
                st.warning("You didn't select any option.")
            else:
                if selection != 2:
                    entry = {
                        'image_id': sample.image_id, 
                        'model_0': sample.model_0.value, 
                        'model_1': sample.model_1.value,
                        'preference': selection,
                    }
                    st.session_state.pref_dict['preferences'].append(entry) 

    st.write(f"Images judged: {len(st.session_state.pref_dict['preferences'])}")
    
    st.write("Once you are done, please download the entries and send them to me through your preferred channel.")

    json_dict = convert_for_download(st.session_state.pref_dict)
    st.download_button(
        label="Download entries",
        data=json_dict,
        file_name=f"data_{id}.json",
        mime="text/plain",
        icon=":material/download:",
    )


if __name__ == "__main__":
    main()
